<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.plx.admin_system.mapper.StudentMapper">

    <resultMap id="studentCoursesMap" type="com.plx.admin_system.entity.views.SelectedCourse">
        <result column="id" property="id" jdbcType="INTEGER"></result>
        <result column="course_id" property="courseId" jdbcType="INTEGER"></result>
        <result column="course" property="course" jdbcType="VARCHAR"></result>
        <result column="type" property="type" jdbcType="TINYINT"></result>
        <result column="category" property="category" jdbcType="VARCHAR"></result>
        <result column="lecturer_id" property="lecturerId" jdbcType="INTEGER"></result>
        <result column="lecturer" property="lecturer" jdbcType="VARCHAR"></result>
        <result column="semester" property="semester" jdbcType="VARCHAR"></result>
        <result column="hours" property="hours" jdbcType="INTEGER"></result>
        <result column="credits" property="credits" jdbcType="FLOAT"></result>
        <result column="remark" property="remark" jdbcType="VARCHAR"></result>
        <result column="is_scheduled" property="isScheduled" jdbcType="TINYINT"></result>
    </resultMap>

    <resultMap id="total3" type="Integer">
        <result column="total" jdbcType="INTEGER" javaType="Integer"></result>
    </resultMap>
    <update id="saveInfo">
        update student
        <set>
            <if test="info.name != null and info.name != ''">
                student_name = #{info.name},
            </if>
            <if test="info.email != null and info.email != ''">
                student_email = #{info.email},
            </if>
            <if test="info.phone != null and info.phone != ''">
                student_phone_number = #{info.phone},
            </if>
            <if test="info.IDNumber != null and info.IDNumber != ''">
                identification_number = #{info.IDNumber},
            </if>
        </set>
        where student_id = #{id}
    </update>
    <update id="modifyPassword">
        update student
        set student_password = #{newPassword}
        where student_id = #{id}
    </update>
    <delete id="cancelCourse">
        delete
        from selected_course
        where id = #{id}
    </delete>

    <select id="getAllCourseList" resultMap="studentCoursesMap,studentCoursesMap,total3">
        with info as
                 (
                     select id, course_id
                     from selected_course
                     where student_id = #{id}
                       and semester = (select current_semester
                                       from student
                                                left join clazz on
                                           clazz.clazz_name = student.clazz_name
                                       where student_id = #{id})
                 )
        select id,
               course.course_id,
               course.course_name as course,
               course.category,
               lecturer_id,
               lecturer,
               hours,
               credits,
               remark,
               is_scheduled
        from course,
             info
        where course.course_id = info.course_id;
        with info as
                 (
                     select category
                     from selected_course
                     where student_id = #{id}
                       and semester = (select current_semester
                                       from student
                                                left join clazz on
                                           clazz.clazz_name = student.clazz_name
                                       where student_id = #{id})
                 )
        select sql_calc_found_rows course.course_id, course.course_name as course,
               course.category,
               lecturer_id,
               lecturer,
               semester,
               hours,
               credits,
               remark
        from course
                 left join info on info.category = course.category
        where info.category is null
          and course_type = 1
            limit #{pageNum}
            , 5;
        select found_rows() as total;
    </select>
    <select id="getCourseTable" resultType="com.plx.admin_system.entity.ScheduledCourseTable">
        with info as
                 (
                     select course_id
                     from course
                     where course.clazz_name =
                           (select clazz_name from student where student_id = #{id})
                     union all
                     select course_id
                     from selected_course
                     where student_id = #{id}
                 )
        select scheduled_course.*
        from info
                 left join scheduled_course
                           on scheduled_course.course_id = info.course_id
        where scheduled_course.course_id is not null;
    </select>

    <select id="getInfo" resultType="com.plx.admin_system.entity.dto.InfoDto">
        select student_name          as name,
               student_phone_number  as phone,
               identification_number as IDNumber,
               student_email         as email,
               avatar_url            as avatar_url
        from student
        where student_id = #{id}
    </select>

    <resultMap id="changeCourseMap2" type="com.plx.admin_system.entity.dto.ChangeCourseDto">
        <result column="change_course_time_id" property="id" jdbcType="INTEGER"></result>
        <result column="course_id" property="courseId" jdbcType="INTEGER"></result>
        <result column="course_name" property="course" jdbcType="VARCHAR"></result>
        <result column="lecturer_id" property="lecturerId" jdbcType="INTEGER"></result>
        <result column="lecturer" property="lecturer" jdbcType="VARCHAR"></result>
        <result column="classroom_name" property="classroom" jdbcType="VARCHAR"></result>
        <result column="building_name" property="building" jdbcType="VARCHAR"></result>
        <result column="change_week" property="changeWeek" jdbcType="INTEGER"></result>
        <result column="change_weekday" property="changeWeekday" jdbcType="VARCHAR"></result>
        <result column="change_course_time" property="changeCourseTime" jdbcType="VARCHAR"></result>
        <result column="curr_week" property="currWeek" jdbcType="INTEGER"></result>
        <result column="weekday" property="weekday" jdbcType="VARCHAR"></result>
    </resultMap>
    <select id="getRescheduledCourses" resultMap="changeCourseMap2,changeCourseMap2">
        with info as
                 (
                     (
                         select course_id
                         from course
                         where course.clazz_name = (select clazz_name from student where student_id = #{id})
                     )
                     union
                     select course_id
                     from selected_course
                     where student_id = #{id}
                 )

        select *
        from change_course_time,
             info
        where change_course_time.course_id = info.course_id
          and change_week = #{week};

        with info as
                 (
                     (
                         select course_id
                         from course
                         where course.clazz_name = (select clazz_name from student where student_id = #{id})
                     )
                     union
                     select course_id
                     from selected_course
                     where student_id = #{id}
                 )

        select *
        from change_course_time,
             info
        where change_course_time.course_id = info.course_id
          and curr_week = #{week};
    </select>

    <insert id="selectCourse">
        insert into selected_course(course_id, course_name, category, student_id, student_name, clazz_name, semester)
            value (#{courseId},#{course},#{category},#{studentId},#{student},
            (select clazz_name from student where student_id = #{studentId}), #{semester})
    </insert>


</mapper>
