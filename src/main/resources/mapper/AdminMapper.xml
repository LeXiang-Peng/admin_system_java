<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.plx.admin_system.mapper.AdminMapper">
    <sql id="studentKey">
        <trim suffixOverrides=",">
            <if test="studentId != null">
                student_id,
            </if>
            student_name,
            <if test="studentGender != null and studentGender != ''">
                student_gender,
            </if>
            <if test="studentEmail != null and studentEmail != ''">
                student_email,
            </if>
            <if test="studentPhoneNumber != null and studentPhoneNumber != ''">
                student_phone_number,
            </if>
            clazz_name,
            <if test="identificationNumber != null and identificationNumber != ''">
                identification_number,
            </if>
        </trim>
    </sql>
    <sql id="studentValue">
        <trim suffixOverrides=",">
            <if test="studentId != null">
                #{studentId},
            </if>
            #{studentName},
            <if test="studentGender != null and studentGender != ''">
                #{studentGender},
            </if>
            <if test="studentEmail != null and studentEmail != ''">
                #{studentEmail},
            </if>
            <if test="studentPhoneNumber != null and studentPhoneNumber != ''">
                #{studentPhoneNumber},
            </if>
            #{clazzName},
            <if test="identificationNumber != null and identificationNumber != ''">
                #{identificationNumber},
            </if>
        </trim>
    </sql>
    <sql id="teacherKey">
        <trim suffixOverrides=",">
            <if test="teacherId != null">
                teacher_id,
            </if>
            teacher_name,
            <if test="teacherGender != null and teacherGender != ''">
                teacher_gender,
            </if>
            <if test="teacherEmail != null and teacherEmail != ''">
                teacher_email,
            </if>
            <if test="teacherPhoneNumber != null and teacherPhoneNumber != ''">
                teacher_phone_number,
            </if>
            department_name
        </trim>
    </sql>
    <sql id="teacherValue">
        <trim suffixOverrides=",">
            <if test="teacherId != null">
                #{teacherId},
            </if>
            #{teacherName},
            <if test="teacherGender != null and teacherGender != ''">
                #{teacherGender},
            </if>
            <if test="teacherEmail != null and teacherEmail != ''">
                #{teacherEmail},
            </if>
            <if test="teacherPhoneNumber != null and teacherPhoneNumber != ''">
                #{teacherPhoneNumber},
            </if>
            #{departmentName}
        </trim>
    </sql>
    <sql id="adminKey">
        <trim suffixOverrides=",">
            <if test="adminId != null">
                admin_id,
            </if>
            admin_name,
            <if test="adminGender != null and adminGender != ''">
                admin_gender,
            </if>
            <if test="adminEmail != null and adminEmail != ''">
                admin_email,
            </if>
            <if test="adminPhoneNumber != null and adminPhoneNumber != ''">
                admin_phone_number,
            </if>
        </trim>
    </sql>
    <sql id="adminValue">
        <trim suffixOverrides=",">
            <if test="adminId != null">
                #{adminId},
            </if>
            #{adminName},
            <if test="adminGender != null and adminGender != ''">
                #{adminGender},
            </if>
            <if test="adminEmail != null and adminEmail != ''">
                #{adminEmail},
            </if>
            <if test="adminPhoneNumber != null and adminPhoneNumber != ''">
                #{adminPhoneNumber},
            </if>
        </trim>
    </sql>

    <insert id="newOneStudent">
        insert into student(<include refid="studentKey"></include>)
        value (<include refid="studentValue"></include>)
    </insert>
    <insert id="newStudents" parameterType="com.plx.admin_system.entity.views.StudentView">
        insert into student(student_id, student_name, clazz_name, student_gender)
            value (#{id},#{name},#{clazz},#{gender})
    </insert>

    <insert id="newOneTeacher">
        insert into teacher(<include refid="teacherKey"></include>)
        value (<include refid="teacherValue"></include>)
    </insert>

    <insert id="newTeachers" parameterType="com.plx.admin_system.entity.views.TeacherView">
        insert into teacher(teacher_id, teacher_name, department_name, teacher_gender)
            value (#{id},#{name},#{department},#{gender})
    </insert>

    <insert id="newOneAdmin">
        insert into admin(<include refid="adminKey"></include>)
        value (<include refid="adminValue"></include>)
    </insert>

    <update id="updateOneStudent" parameterType="com.plx.admin_system.entity.dto.EditForm">
        update student
        <set>
            <if test="editForm.id != null">
                student_id = #{editForm.id},
            </if>
            <if test="editForm.name != null and editForm.name != ''">
                student_name = #{editForm.name},
            </if>
            <if test="editForm.clazz != null and editForm.clazz != ''">
                clazz_name = #{editForm.clazz},
            </if>
            <if test="editForm.gender != null and editForm.gender != ''">
                student_gender = #{editForm.gender},
            </if>
        </set>
        where student_id = #{studentId}
    </update>

    <update id="deleteStudents">
        update student
        set is_existed = false
        where student_id in
        <foreach collection="id" open="(" close=")" separator="," item="item">
            #{item}
        </foreach>
    </update>

    <update id="resetStudentPassword">
        update student
        set student_password = default
        where student_id = #{id}
    </update>
    <update id="resetTeacherPassword">
        update teacher
        set teacher_password = default
        where teacher_id = #{id}
    </update>

    <update id="updateOneTeacher">

    </update>
    <update id="deleteTeachers">
        update teacher
        set is_existed = false
        where teacher_id in
        <foreach collection="id" open="(" close=")" separator="," item="item">
            #{item}
        </foreach>
    </update>
    <update id="grantTeacher">
        update teacher
        set is_authorized = 1
        where teacher_id = #{id}
    </update>

    <update id="deleteAdmins">
        update admin
        set is_existed = false
        where admin_id in
        <foreach collection="id" open="(" close=")" separator="," item="item">
            #{item}
        </foreach>
    </update>
    <update id="resetAdminPassword">
        update admin
        set admin_password = default
        where admin_id = #{id}
    </update>
    <update id="grantAdmin">
        update admin
        set admin_type = default
        where admin_id = #{id}
    </update>
    <update id="revokeAdminADay">
        update admin
        set admin_type = 2
        where admin_id = #{id};
        create
        event revoke_admin_a_day
        on schedule at current_timestamp + interval 5 second
        DO
        update admin
        set admin_type = default
        where admin_id = #{id};
    </update>
    <update id="revokeAdmin">
        update admin
        set admin_type = 3
        where admin_id = #{id};
    </update>
    <update id="privilegeEscalationADay">
        update admin
        set admin_type = 1
        where admin_id = #{id};
        create
        event grant_admin_a_day
        on schedule at current_timestamp + interval 5 second
        DO
        update admin
        set admin_type = default
        where admin_id = #{id};
    </update>
    <update id="demotionRights">
        update admin
        set admin_type = default
        where admin_id = #{id}
    </update>

    <update id="deleteNonAdminTeachers">
        update teacher
        set is_existed = false
        where (is_authorized = 0 or is_authorized = 3) and teacher_id in
        <foreach collection="id" open="(" close=")" separator="," item="item">
            #{item}
        </foreach>
    </update>
    <update id="deleteNonSuperAdminTeachers">
        update teacher
        set is_existed = false
        where is_authorized &lt;&gt; 2 and teacher_id in
        <foreach collection="id" open="(" close=")" separator="," item="item">
            #{item}
        </foreach>
    </update>
    <update id="revokeTeacher">
        update teacher
        set teacher.is_authorized = default
        where teacher_id = #{id};
    </update>
    <update id="banTeacherADay">
        update teacher
        set teacher.is_authorized = 3
        where teacher_id = #{id};
        create
        event revoke_teacher_a_day
        on schedule at current_timestamp + interval 5 second
        DO
        update teacher
        set is_authorized = 1
        where teacher_id = #{id};
    </update>
    <update id="banTeacher">
        update teacher
        set teacher.is_authorized = 4
        where teacher_id = #{id};
    </update>
    <update id="privilegeEscalationADay2">
        update teacher
        set teacher.is_authorized = 2
        where teacher_id = #{id};
        create
        event grant_teacher_a_day
        on schedule at current_timestamp + interval 5 second
        DO
        update teacher
        set is_authorized = 1
        where teacher_id = #{id};
    </update>

    <update id="rejectCourseRequest">
        update approvaling_course
        set status = 2
        where approvaling_course_id = #{id}
    </update>
    <update id="updateCourseInfo">
        update course
        set is_scheduled = 1
        where course_id = #{id};
    </update>
    <update id="saveInfo">
        update admin
        <set>
            <if test="info.name != null and info.name != ''">
                admin_name = #{info.name},
            </if>
            <if test="info.email != null and info.email != ''">
                admin_email = #{info.email},
            </if>
            <if test="info.phone != null and info.phone != ''">
                admin_phone_number = #{info.phone},
            </if>
        </set>
        where admin_id = #{id}
    </update>

    <sql id="courseKey">
        <if test="clazz != null and clazz != ''">
            clazz_name,
        </if>
        course_name,
        course_type,
        lecturer_id,
        lecturer,
        hours,
        credits,
        remark,
        semester,
        category
    </sql>
    <sql id="courseValue">
        <if test="clazz != null and clazz != ''">
            #{clazz},
        </if>
        #{course} ,
        #{type} ,
        #{lecturerId} ,
        #{lecturer} ,
        #{hours} ,
        #{credits} ,
        #{remark} ,
        #{semester},
        #{category}
    </sql>
    <insert id="passCourseRequest">
        update approvaling_course
        set status = 1
        where approvaling_course_id = #{id};
        insert into course(<include refid="courseKey"></include>)
        value(<include refid="courseValue"></include>);
    </insert>

    <insert id="insertTasks">
        insert into scheduled_course(course_id, course_name, lecturer_id, lecturer, classroom_name, building_name,
                                     weekday, course_time, semester, weeks_total, times_once_a_week, current_times,
                                     total_times)
            value (#{task.id}, #{course.course}, #{course.lecturerId}, #{course.lecturer}, #{roomInfo.classroomName},
            #{roomInfo.buildingName}, #{weekDay}, #{courseTime}, #{course.semester}, #{task.weeksTotal},
            #{task.timesOnceAWeek}, #{task.currentTimes}, #{task.totalTimes});
    </insert>


    <resultMap id="studentsMap" type="com.plx.admin_system.entity.views.StudentView">
        <result column="id" property="id" jdbcType="INTEGER"></result>
        <result column="name" property="name" jdbcType="VARCHAR"></result>
        <result column="clazz" property="clazz" jdbcType="VARCHAR"></result>
        <result column="profession" property="profession" jdbcType="VARCHAR"></result>
        <result column="department" property="department" jdbcType="VARCHAR"></result>
        <result column="gender" property="gender" jdbcType="VARCHAR"></result>
        <result column="grade" property="grade" jdbcType="VARCHAR"></result>
    </resultMap>

    <resultMap id="total" type="Integer">
        <result column="total" jdbcType="INTEGER" javaType="Integer"></result>
    </resultMap>

    <sql id="queryStudentParams">
        <if test="queryStudentParams != null">
            <where>
                <trim prefixOverrides="and">
                    <if test="queryStudentParams.id != null">
                        id like concat(#{queryStudentParams.id},'%')
                    </if>
                    <if test="queryStudentParams.name != null and queryStudentParams.name != ''">
                        and name like concat('%',#{queryStudentParams.name},'%')
                    </if>
                    <if test="queryStudentParams.clazz != null and queryStudentParams.clazz != ''">
                        and clazz = #{queryStudentParams.clazz}
                    </if>
                    <if test="queryStudentParams.profession != null and queryStudentParams.profession != ''">
                        and profession = #{queryStudentParams.profession}
                    </if>
                    <if test="queryStudentParams.department != null and queryStudentParams.department != ''">
                        and department = #{queryStudentParams.department}
                    </if>
                </trim>
            </where>
        </if>
    </sql>

    <select id="getStudentList" resultMap="studentsMap,total">
        select sql_calc_found_rows *
        from student_list
        <include refid="queryStudentParams"></include>
        limit #{pageNum}, #{pageSize};
        select found_rows() as total;
    </select>


    <select id="getOptionsView" resultType="com.plx.admin_system.entity.views.OptionsView">
        select *
        from clazz_profession_department_view
    </select>
    <select id="getAllStudents" resultType="com.plx.admin_system.entity.views.StudentView">
        select *
        from student_list;
    </select>
    <select id="getAllTeachers" resultType="com.plx.admin_system.entity.views.TeacherView">
        select *
        from teacher_list
    </select>

    <resultMap id="teachersMap" type="com.plx.admin_system.entity.views.TeacherView">
        <result column="id" property="id" jdbcType="SMALLINT"></result>
        <result column="name" property="name" jdbcType="VARCHAR"></result>
        <result column="department" property="department" jdbcType="VARCHAR"></result>
        <result column="gender" property="gender" jdbcType="VARCHAR"></result>
    </resultMap>

    <sql id="queryTeacherParams">
        <if test="queryTeacherParams != null">
            <where>
                <trim prefixOverrides="and">
                    <if test="queryTeacherParams.id != null">
                        id like concat(#{queryTeacherParams.id},'%')
                    </if>
                    <if test="queryTeacherParams.name != null and queryTeacherParams.name != ''">
                        and name like concat('%',#{queryTeacherParams.name},'%')
                    </if>
                    <if test="queryTeacherParams.department != null and queryTeacherParams.department != ''">
                        and department = #{queryTeacherParams.department}
                    </if>
                    <if test="queryTeacherParams.type != null ">
                        and type = #{queryTeacherParams.type}
                    </if>
                </trim>
            </where>
        </if>
    </sql>

    <select id="getTeacherList" resultMap="teachersMap,total">
        select sql_calc_found_rows *
        from teacher_list
        <include refid="queryTeacherParams"></include>
        limit #{pageNum}, #{pageSize};
        select found_rows() as total;
    </select>

    <select id="getDepartmentList" resultType="java.lang.String">
        select department_name as department
        from department
    </select>

    <resultMap id="adminsMap" type="com.plx.admin_system.entity.views.AdminView">
        <result column="id" property="id" jdbcType="SMALLINT"></result>
        <result column="name" property="name" jdbcType="VARCHAR"></result>
        <result column="gender" property="gender" jdbcType="VARCHAR"></result>
        <result column="type" property="type" jdbcType="TINYINT"></result>
    </resultMap>

    <sql id="queryAdminParams">
        <if test="queryAdminParams != null">
            <where>
                <trim prefixOverrides="and">
                    <if test="queryAdminParams.id != null">
                        id like concat(#{queryAdminParams.id},'%')
                    </if>
                    <if test="queryAdminParams.name != null and queryAdminParams.name != ''">
                        and name like concat('%',#{queryAdminParams.name},'%')
                    </if>
                    <if test="queryAdminParams.type != null">
                        and type = #{queryAdminParams.type}
                    </if>
                </trim>
            </where>
        </if>
    </sql>

    <sql id="queryPendingCoursesParams">
        <if test="queryPendingCoursesParams != null">
            <where>
                <trim prefixOverrides="and">
                    <if test="queryPendingCoursesParams.course != null and queryPendingCoursesParams.course != ''">
                        course like concat('%',#{queryPendingCoursesParams.course},'%')
                    </if>
                    <if test="queryPendingCoursesParams.type != null">
                        and type = #{queryPendingCoursesParams.type}
                    </if>
                    <if test="queryPendingCoursesParams.lecturerId != null">
                        and lecturer_id = #{queryPendingCoursesParams.lecturerId}
                    </if>
                    <if test="queryPendingCoursesParams.lecturer != null and queryPendingCoursesParams.lecturer != ''">
                        and lecturer like concat('%',#{queryPendingCoursesParams.lecturer},'%')
                    </if>
                    <if test="queryPendingCoursesParams.category != null and queryPendingCoursesParams.category != ''">
                        and category = #{queryPendingCoursesParams.category}
                    </if>
                </trim>
            </where>
        </if>
    </sql>

    <resultMap id="pendingCoursesMap" type="com.plx.admin_system.entity.views.PendingCourse">
        <result column="id" property="id" jdbcType="INTEGER"></result>
        <result column="course" property="course" jdbcType="VARCHAR"></result>
        <result column="type" property="type" jdbcType="TINYINT"></result>
        <result column="category" property="category" jdbcType="VARCHAR"></result>
        <result column="clazz" property="clazz" jdbcType="VARCHAR"></result>
        <result column="semester" property="semester" jdbcType="VARCHAR"></result>
        <result column="lecturer_id" property="lecturerId" jdbcType="INTEGER"></result>
        <result column="lecturer" property="lecturer" jdbcType="VARCHAR"></result>
        <result column="remark" property="remark" jdbcType="VARCHAR"></result>
    </resultMap>

    <select id="getAdminList" resultMap="adminsMap,total">
        select sql_calc_found_rows *
        from admin_list
        <include refid="queryAdminParams"></include>
        limit #{pageNum}, #{pageSize};
        select found_rows() as total;
    </select>
    <select id="getGrantedTeacherList" resultMap="teachersMap,total">
        select sql_calc_found_rows *
        from granted_teachers
        <include refid="queryTeacherParams"></include>
        limit #{pageNum},#{pageSize};
        select found_rows() as total;
    </select>
    <select id="getPendingCourses" resultMap="pendingCoursesMap,total">
        select sql_calc_found_rows *
        from pending_courses
        <include refid="queryPendingCoursesParams"></include>
        limit #{pageNum},#{pageSize};
        select found_rows() as total;
    </select>
    <resultMap id="toBeScheduledCoursesMap" type="com.plx.admin_system.entity.views.ToBeScheduledCourses">
        <result column="id" property="id" jdbcType="INTEGER"></result>
        <result column="course" property="course" jdbcType="VARCHAR"></result>
        <result column="type" property="type" jdbcType="TINYINT"></result>
        <result column="category" property="category" jdbcType="VARCHAR"></result>
        <result column="semester" property="semester" jdbcType="VARCHAR"></result>
        <result column="lecturer_id" property="lecturerId" jdbcType="INTEGER"></result>
        <result column="lecturer" property="lecturer" jdbcType="VARCHAR"></result>
        <result column="student_total" property="studentTotal" jdbcType="INTEGER"></result>
        <result column="clazz" property="clazz" jdbcType="VARCHAR"></result>
        <result column="hours" property="hours" jdbcType="INTEGER"></result>
    </resultMap>

    <sql id="queryToBeScheduledParams">
        <if test="queryToBeScheduledParams != null">
            <where>
                <trim prefixOverrides="and">
                    <if test="queryToBeScheduledParams.course != null and queryToBeScheduledParams.course != ''">
                        course like concat('%',#{queryToBeScheduledParams.course},'%')
                    </if>
                    <if test="queryToBeScheduledParams.type != null">
                        and type = #{queryToBeScheduledParams.type}
                    </if>
                    <if test="queryToBeScheduledParams.lecturerId != null">
                        and lecturer_id = #{queryToBeScheduledParams.lecturerId}
                    </if>
                    <if test="queryToBeScheduledParams.lecturer != null and queryToBeScheduledParams.lecturer != ''">
                        and lecturer like concat('%',#{queryToBeScheduledParams.lecturer},'%')
                    </if>
                    <if test="queryToBeScheduledParams.category != null and queryToBeScheduledParams.category != ''">
                        and category = #{queryToBeScheduledParams.category}
                    </if>
                </trim>
            </where>
        </if>
    </sql>

    <resultMap id="ScheduledCoursesMap" type="com.plx.admin_system.entity.ScheduledCourseTable">
        <result column="scheduled_course_id" property="scheduledCourseId" jdbcType="INTEGER"></result>
        <result column="course_id" property="courseId" jdbcType="INTEGER"></result>
        <result column="course_name" property="courseName" jdbcType="VARCHAR"></result>
        <result column="lecturer_id" property="lecturerId" jdbcType="INTEGER"></result>
        <result column="lecturer" property="lecturer" jdbcType="VARCHAR"></result>
        <result column="classroom_name" property="classroomName" jdbcType="VARCHAR"></result>
        <result column="building_name" property="buildingName" jdbcType="VARCHAR"></result>
        <result column="weekday" property="weekDay" jdbcType="VARCHAR"></result>
        <result column="course_time" property="courseTime" jdbcType="INTEGER"></result>
        <result column="semester" property="semester" jdbcType="VARCHAR"></result>
    </resultMap>

    <sql id="queryScheduledParams">
        <where>
            !course.is_completed
            <if test="queryScheduledParams != null">
                <if test="queryScheduledParams.courseName != null and queryScheduledParams.courseName != ''">
                    and scheduled_course.course_name like concat('%',#{queryScheduledParams.courseName},'%')
                </if>
                <if test="queryScheduledParams.lecturerId != null">
                    and scheduled_course.lecturer_id = #{queryScheduledParams.lecturerId}
                </if>
                <if test="queryScheduledParams.lecturer != null and queryScheduledParams.lecturer != ''">
                    and scheduled_course.lecturer like concat('%',#{queryScheduledParams.lecturer},'%')
                </if>
            </if>
        </where>
    </sql>

    <select id="getToBeScheduledCourses" resultMap="toBeScheduledCoursesMap,total">
        select sql_calc_found_rows *
        from to_be_scheduled_course
        <include refid="queryToBeScheduledParams"></include>
        limit #{pageNum},#{pageSize};
        select found_rows() as total;
    </select>
    <select id="getScheduledCourse" resultMap="ScheduledCoursesMap,total">
        select sql_calc_found_rows scheduled_course.*
        from scheduled_course
        left join course
        on course.course_id = scheduled_course.course_id
        <include refid="queryScheduledParams"></include>
        limit #{pageNum}, #{pageSize};
        select found_rows() as total;
    </select>
    <select id="getClazzs" resultType="java.lang.String">
        select clazz_name as clazz
        from selected_course
        where course_id = #{id}
        group by clazz_name
    </select>
    <resultMap id="adminInfoMap" type="com.plx.admin_system.entity.dto.InfoDto">
        <result column="admin_name" property="name" jdbcType="VARCHAR"></result>
        <result column="admin_phone_number" property="phone" jdbcType="VARCHAR"></result>
        <result column="admin_email" property="email" jdbcType="VARCHAR"></result>
    </resultMap>
    <select id="getInfo" resultType="com.plx.admin_system.entity.dto.InfoDto">
        select admin_email as email, admin_phone_number as phone, admin_name as name
        from admin
        where admin_id = #{id}
    </select>
</mapper>
