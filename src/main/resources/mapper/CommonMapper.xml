<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.plx.admin_system.mapper.CommonMapper">
    <resultMap id="menuMap" type="com.plx.admin_system.entity.views.Menu">
        <result column="menu_id" property="menuId"></result>
        <result column="menu_name" property="menuName"></result>
        <result column="parent_menu_id" property="parentMenuId"></result>
    </resultMap>

    <select id="getOneStudentById" resultType="com.plx.admin_system.entity.Student">
        select student_id, student_name, student_password
        from student
        where student_id = #{id}
    </select>
    <select id="getOneAdminById" resultType="com.plx.admin_system.entity.Admin">
        select admin_id, admin_name, admin_password, admin_type
        from admin
        where admin_id = #{id}
    </select>
    <select id="getOneTeacherById" resultType="com.plx.admin_system.entity.Teacher">
        select teacher_id, teacher_name, teacher_password, is_authorized
        from teacher
        where teacher_id = #{id}
    </select>
    <select id="getStudentMenu" resultMap="menuMap">
        select *
        from student_menu
    </select>
    <select id="getTeacherAdminMenu" resultMap="menuMap">
        select *
        from teacher_admin_menu
    </select>
    <select id="getTeacherMenu" resultMap="menuMap">
        select *
        from teacher_menu
    </select>
    <select id="getSuperAdminMenu" resultMap="menuMap">
        select *
        from superadmin_menu
    </select>
    <select id="getAdminMenu" resultMap="menuMap">
        select *
        from admin_menu
    </select>
    <select id="getRevokedAdminMenu" resultMap="menuMap">
        select *
        from revoked_admin_menu
    </select>
    <select id="getTeacherSuperAdminMenu" resultMap="menuMap">
        select *
        from teacher_superadmin_menu
    </select>

    <resultMap id="tobeScheduledCourseInfoMap" type="com.plx.admin_system.utils.pojo.schduledCourse.CourseTask">
        <id column="course_id" property="id" jdbcType="INTEGER"></id>
        <association property="course" javaType="com.plx.admin_system.utils.pojo.schduledCourse.SchedulingCourse">
            <id column="course_id" property="courseId" jdbcType="INTEGER"></id>
            <result column="course_name" property="course" jdbcType="VARCHAR"></result>
            <result column="lecturer_id" property="lecturerId" jdbcType="INTEGER"></result>
            <result column="lecturer" property="lecturer" jdbcType="VARCHAR"></result>
            <result column="hours" property="hours" jdbcType="INTEGER"></result>
            <result column="semester" property="semester" jdbcType="VARCHAR"></result>
            <result column="student_total" property="studentTotal" jdbcType="INTEGER"></result>
            <result column="clazz"></result>
            <collection property="clazzList" ofType="String">
                <result column="clazz"></result>
            </collection>
        </association>
    </resultMap>

    <select id="getToBeScheduledCourse" resultMap="tobeScheduledCourseInfoMap">
        select *
        from to_be_scheduled_course_info
    </select>

    <resultMap id="classroomsMap" type="com.plx.admin_system.utils.pojo.schduledCourse.ClassroomInfo">
        <result column="classroom_name" property="classroomName" jdbcType="VARCHAR"></result>
        <result column="building_name" property="buildingName" jdbcType="VARCHAR"></result>
        <result column="capacity" property="capacity" jdbcType="INTEGER"></result>
    </resultMap>

    <resultMap id="_total" type="Integer">
        <result column="total" jdbcType="INTEGER" javaType="Integer"></result>
    </resultMap>

    <select id="getAllClassroom" resultMap="classroomsMap,_total">
        select sql_calc_found_rows classroom_name, building_name, capacity
        from classroom;
        select found_rows() as total;
    </select>

    <delete id="resetCourseTable">
        update course
        set is_scheduled =0
        where !is_completed;
        delete
        from scheduled_course
        where scheduled_course.course_id in
              (select course.course_id
               from course
               where !is_completed)
    </delete>

</mapper>
